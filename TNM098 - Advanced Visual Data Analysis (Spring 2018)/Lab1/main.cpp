#include <iostream>
#include <vector>
#include <fstream>
#include <cmath>

const double criticalValue = 1.96;
int COUNTER = 0;
/***
 * FUNCTION DECLARATIONS:
 * double mean(int posRuns, int negRuns): Help function for Wald_Wolfowitz run test.
 * double variance(int posRuns, int negRuns): Help function for Wald_Wolfowitz run test.
 * void Wald_Wolfowitz(std::string& s): Wald_Wolfowitz run test
 * double even_variance(const std::string& x): Help function for evenness test.
 * void evenness(std::string& s): Check even-ness of 0's and 1's and also take the derivative of the string in consideration.
 * void FreqAnalyse(std::string& s): Frequence analysis test.
 */
double mean(int posRuns, int negRuns);
double variance(int posRuns, int negRuns);
void Wald_Wolfowitz(std::string& s);
float even_variance(const std::string& x);
void evenness(std::string& s);
void FreqAnalyse(std::string& s);



/**
 * MAIN FUNCTION.
 * For every sequence apply the three randomness test and consider a majority vote between the tests.
 * If 2 or more tests that consider a sequence is not random => not random.
 */
int main() {
    //Read every line from txt file, store in vector.
    std::ifstream file ("../Lab1_data.txt");

    if(!file.is_open()){
        std::cout << "Cannot open file" << std::endl;
    }

    std::vector<std::string> seq {std::istream_iterator<std::string>{file}, std::istream_iterator<std::string>{}};
    std::cout << "Number of binary sequence read: " << seq.size() << std::endl;

    int index = 1;
    int total_amount = 0;
    //For every sequence.
    std::for_each(seq.begin(), seq.end(),[&index, &total_amount](std::string& s) {
        Wald_Wolfowitz(s);
        FreqAnalyse(s);
        evenness(s);
        std::cout << "\n";
        if(COUNTER >= 2) {
            std::cout << index <<  ": Human" << std::endl;
            total_amount++;
        }
        else {
            std::cout << index << ": Computer" << std::endl;
        }
        COUNTER = 0;
        index++;
    });
    std::cout << std::endl;
    std::cout << "Total amount of sequences generated by humans: " << total_amount << std::endl;

}


/**
 * FUNCTION DEFINITIONS
 */
double mean(int num_pos, int num_neg){
    return ((2*num_pos*num_neg)/(num_pos+num_neg))+1;
}

double variance(int num_pos, int num_neg){
    return ((mean(num_pos,num_neg)-1)*(mean(num_pos,num_neg)-2))/((num_pos+num_neg)-1);
}

void Wald_Wolfowitz(std::string& s){
    int totalRuns = 0; //Total amount of runs
    int positiveRuns = 0; //Positive runs for 1's
    int negativeRuns = 0; //Negative runs for 0's
    int num_ones = 0;
    int num_zeros = 0;

    for(unsigned int i = 1; i <= s.size(); i++){ //Count number of runs
        if(s[i-1] == '1' && s[i] != '1'){
            positiveRuns++;
        }
        else if(s[i-1] == '0' && s[i] != '0'){
            negativeRuns++;
        }
        else if(s[i-1] == s.size()){
            s[i-1] == '0' ? negativeRuns++ : positiveRuns++;
        }
    }
    totalRuns = positiveRuns+negativeRuns; //Total number of runs.

    for(char& c : s){ //Count frequencies of zeros and ones.
        c == '1' ? num_ones++ : num_zeros++;
    }

    double Z = (totalRuns - mean(num_ones, num_zeros))/sqrt(variance(num_ones,num_zeros)); //Test statistic

    if(abs(Z) > criticalValue){ //Critical value of 1.96, from normal distribution table of 0.975.
       // std::cout << "Human" << std::endl;
        COUNTER ++;
    }
   // else{
       // std::cout << "Computer" << std::endl;
  //  }
}

float even_variance(const std::string& x) {
    long zeroes = std::count(x.begin(), x.end(), '0');
    float total = x.length();
    float deviation = zeroes / total - 0.5f;
    return deviation * deviation;
}

void derive(std::string& x) {
    char last = *x.rbegin();
    for (std::string::iterator it = x.begin(); it != x.end(); ++it) {
        char current = *it;
        *it = '0' + (current != last);
        last = current;
    }
}

//Check evenness of 0 and 1 of string
void evenness(std::string& s) {
    float sum = even_variance(s);
    float weight = 1.0f;
    for (int i = 1; i < 5; ++i) {
        derive(s);
        weight *= 2.0f;
        sum += even_variance(s) * weight;
    }

    float evenness = 1.0f/sum;
    if(evenness >= 40.0f) {
       // std::cout << "Evenness: Human " << std::endl;
        COUNTER++;
    }
   // else
    //  std::cout << "Evenness: Computer" << std::endl;
}

void FreqAnalyse(std::string& s) {
    float freq = 0;

    int counters[256] = {0};
    for (char i : s)
        counters[i]++;

    freq =  counters['1'] / counters['0'];

    if(freq <= 0.1) {
       // std::cout << "Human" << std::endl;
        COUNTER++;
    }
   // else
     //   std::cout << "Computer" << std::endl;
}